"=====================Vundle =======================================
set nocompatible              " be iMproved, required
filetype off                  " required

"git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

"plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
Plugin 'easymotion/vim-easymotion'

" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
Plugin 'The-NERD-tree'
Plugin 'The-NERD-Commenter'
Plugin 'taglist.vim'
Plugin 'Tagbar'
Plugin 'ctrlp.vim'
Plugin 'c.vim'
Plugin 'a.vim'
Plugin 'bufexplorer.zip'
Plugin 'winmanager'
Plugin 'OmniCppComplete'
Plugin 'echofunc.vim'
Plugin 'Lokaltog/vim-powerline'
"Plugin 'TaskList.vim'
Plugin 'godlygeek/tabular'
"Plugin 'vim-syntastic/syntastic'
"YouCompleteMe 实现了syntastic相同的功能，并且两者有冲突，建议启动其中一个
Plugin 'Valloric/YouCompleteMe'

" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
Plugin 'git://github.com/tomasr/molokai.git'

" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"
"=====================Global ========================================
"

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

"=====================colors=================================
" 配色方案 
set t_Co=256
" Switch syntax highlighting on, when the terminal has colors
if has("gui_running") && !exists("syntax_on")
  syntax on
endif

" Enable syntax highlighting
syntax enable 

colorscheme molokai 
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

"修改注释颜色
highlight Comment ctermfg=blue guifg=blue

"=====================tags=================================
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes  --languages=c,c++ --links=yes --c++-kinds=+p --fields=+ialS --extra=+q -R -f ~/.vim/systags /usr/include /usr/local/include

"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes  --languages=c,c++ --links=yes --c++-kinds=+p --fields=+ialS --extra=+q -f ~/.vim/systags /usr/include/* /usr/include/sys/* /usr/include/bits/* /usr/include/netinet/* /usr/include/arpa/* /usr/include/mysql/* /usr/include/x86_64-linux-gnu/*
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes  --languages=c,c++ --links=yes --c++-kinds=+p --fields=+ialS --extra=+q -R

"ctags
"//;不可省略 表示当前目录不存在tags，则在父目录中寻找
set tags=tags; 
set tags+=/root/.vim/systags
set path+=/usr/include,/usr/include/x86_64-linux-gnu/,/usr/local/include/,/root/dp/wes1.1/common/

map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>
imap <F5> <ESC>:!ctags -R  --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>

"=============== Cscope======================================== 
if has("cscope")
	set csprg=/usr/bin/cscope " 指定用来执行cscope的命令
	set csto=0 " 设置cstag命令查找次序：0先找cscope数据库再找标签文件；1先找标签文件再找cscope数据库
	set cst " 同时搜索cscope数据库和标签文件
	set cscopequickfix=s-,c-,d-,i-,t-,e- " 使用QuickFix窗口来显示cscope查找结果
	set nocsverb
	if filereadable("cscope.out") " 若当前目录下存在cscope数据库，添加该数据库到vim
		cs add cscope.out
	elseif $CSCOPE_DB != "" " 否则只要环境变量CSCOPE_DB不为空，则添加其指定的数据库到vim
		cs add $CSCOPE_DB
	endif
	set csverb
endif

"Ignore compiled files
set wildignore=*.o,*~,*.pyc,.git/*,.hg/*,.svn/*

nmap <leader>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>d :scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <leader><leader>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>i :vert scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <leader><leader>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

"=========== QuickFix ============================== 
" 按下F6，执行make clean
map <F6> :make clean<CR><CR><CR>
" 按下F7，执行make编译程序，并打开quickfix窗口，显示编译信息
map <F7> :make<CR><CR><CR> :copen<CR><CR>
" 按下F8，光标移到上一个错误所在的行
map <F8> :cp<CR>
" 按下F9，光标移到下一个错误所在的行
map <F9> :cn<CR>

"=====================The-NERD-Commenter=================================
"快速批量注释,方便好用 The-NERD-Commenter
"<leader>cc 注释当前选中文本
"<leader>cu 取消选中文本块的注释。

"=====================The-NERD-tree=================================
nmap <leader>nt :NERDTree<cr>:set rnu<cr>
let NERDChristmasTree=0
let NERDTreeChDirMode=2
let NERDTreeWinSize=35
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeHighlightCursorline=1
let NERDTreeWinPos="left"
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\~$', '\.swp$']
" Automatically open a NERDTree if no files where specified
autocmd vimenter * if !argc() | NERDTree | endif
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end


"=====================taglist.vim========================================
"<leader>tl 打开taglist窗口
nmap <leader>tl :Tlist<CR><c-l>                
let Tlist_Ctags_Cmd="ctags"
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_File_Fold_Auto_Close = 1             " 非当前文件，自动折叠
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_Sort_Type = "name"                  "tems in tags sorted by name 
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Process_File_Always  = 1             "实时更新tags
let Tlist_Inc_Winwidth = 0                     "terminal/console mode

"=====================Tagbar========================================
"<leader>tb 打开tagbar窗口
nmap <leader>tb :TagbarToggle<CR>  
let g:tarbar_width=35
let g:tagbar_autofocus = 1

"=====================c.vim========================================
"\if      添加函数
"\im    添加主函数
"\cfu   添加 一筐 注释
"\p<   添加 include
"\p"    添加 include
"\nr    插入一段 代码片段， 该代码片段在~/.vim/c-support/codesnippets


"=====================a.vim========================================
"切换源文件头文件 a.vim
":A 在同一tab切换源文件/头文件
":AV 竖向切割窗口,打开对应的源文件/头文件
":AS 横向切割窗口,打开对应的源文件/头文件

"=====================ShowMarks========================================
let showmarks_enable = 1
" Show which marks
let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
" Ignore help, quickfix, non-modifiable buffers
let showmarks_ignore_type = "hqm"
" Hilight lower & upper marks
let showmarks_hlline_lower = 1
let showmarks_hlline_upper = 1 

hi ShowMarksHLl ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
hi ShowMarksHLu ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black 

"=====================EasyMotion========================================
"快速移动 EasyMotion
"help easymotion <leader><leader> w

"=====================echofunc.vim========================================
"let g:EchoFuncShowOnStatus = 1

"=====================syntastic========================================
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"=====================ctrlp.vim========================================
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*.gif " MacOSX/Linux
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

"=====================winmanager========================================
"winmanager
let g:winManagerWindowLayout="TagList,FileExplorer|BufExplorer" "'FileExplorer|TagList'
let g:persistentBehaviour=0 "所有编辑文件都关闭，退出vim
"设置宽度，默认为25
"let g:winManagerHigh = 50
"在进入vim时自动打开winmanager
"let g:AutoOpenWinManager = 1
"快捷键打开WinManager
nmap <leader>wm :WMToggle<cr>


"=======omnicppcomplete==================================================
" 按下F3自动补全代码，注意该映射语句后不能有其他字符，包括tab；否则按下F3会自动补全一些乱码
imap <F3> <C-X><C-O>
" 按下F2根据头文件内关键字补全
imap <F2> <C-X><C-I>
set completeopt=menu,menuone " 关掉智能补全时的预览窗口
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype in popup window
let OmniCpp_GlobalScopeSearch=1 " enable the global scope search
let OmniCpp_DisplayMode=1 " Class scope completion mode: always show all members
"let OmniCpp_DefaultNamespaces=["std"]
let OmniCpp_ShowScopeInAbbr=1 " show scope in abbreviation and remove the last column
let OmniCpp_ShowAccess=1

"=====================general========================================
"打开man手册，分割窗口 <leader>K
runtime! ftplugin/man.vim

"允许未保存切换buffer 隐藏buff
set hidden

"可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key 

"复制之前的缩进
set copyindent

":substitute" flag 'g' is default on
set gdefault

" Set to auto read when a file is changed from the outside
set autoread

"Write the contents of the file, if it has been modified
set autowrite

"显示行号
set number

"历史记录数
set history=1000

"Always show current position
set ruler

"show (partial) command keys in the status line
set showcmd

"Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=b,s,<,>,[,],h,l

"带有如下符号的单词不要换行分割
set iskeyword=@,48-57,_

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" no visualbell
set novisualbell

"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1

"匹配括号的规则，增加针对html的<>
set matchpairs=(:),{:},[:],<:>

" No annoying sound on errors
set noerrorbells
set novisualbell

" Add a bit extra margin to the left
set foldcolumn=1

"在处理未保存或只读文件的时候，弹出确认
set confirm

"设置光标高亮显示
"set cursorline
"set cursorcolumn

"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3 

" Always show the status line
set laststatus=2
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [ROW=%03l/%L(%p%%)]\ [COL=%03v]

"Set utf8 as standard encoding 
"en_US as the standard language

set encoding=utf-8        "vim 内部使用的编码方式
set termencoding=utf-8    "用于屏幕显示
set langmenu=zh_CN.UTF-8
set helplang=cn
set fileformats=unix,dos
set fenc=utf-8
"cp936 = gb2312
set fencs=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1 

" Use spaces instead of tabs, 1 tab == 4 spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab

" Linebreak on 100 characters
set lbr
set textwidth=100
set formatoptions+=t

"自动换行
set wrap
set cindent
set autoindent
set smartindent 

"字符间插入的像素数目
set linespace=0

"增强模式中的命令行自动完成操作
set wildmenu

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
noremap <C-j> <C-W>j
noremap <C-k> <C-W>k
noremap <C-h> <C-W>h
noremap <C-l> <C-W>l

set foldenable           " enable folden
set foldmethod=manual    " manual : Folds are created manually.
                         " indent : Lines with equal indent form a fold.
                         " expr   : ‘foldexpr’ gives the fold level of a line.
                         " marker : Markers are used to specify folds.
                         " syntax : Syntax highlighting items specify folds.
                         " diff   : Fold text that is not changed.
"set foldclose=all

" use space to folden
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal! g`\"" |
			\ endif

" Remember info about open buffers on close
set viminfo^=%

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
