"=====================Vundle =======================================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

"plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
Plugin 'The-NERD-tree'
Plugin 'The-NERD-Commenter'
Plugin 'taglist.vim'
Plugin 'Tagbar'
Plugin 'c.vim'
Plugin 'a.vim'
Plugin 'winmanager'
Plugin 'bufexplorer.zip'


" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
Plugin 'git://github.com/altercation/vim-colors-solarized.git'
Plugin 'git://github.com/tomasr/molokai.git'

" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'

" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"
"=====================Global ========================================
"
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

"=====================colors=================================
" Enable syntax highlighting

syntax enable 

" 配色方案 
set t_Co=256

if  has('gui_running')
    set background=light
    colorscheme solarized 
    " 主题 solarized Bundle 'altercation/vim-colors-solarized'
    let g:solarized_termcolors=256 
    let g:solarized_termtrans=1 
    let g:solarized_contrast="normal" 
    let g:solarized_visibility="normal" 

    "colorscheme molokai 
else 
    set background=dark
    colorscheme molokai 
    " 主题 molokai Bundle 'tomasr/molokai' 
    let g:molokai_original = 1 

    "colorscheme solarized 
endif


"修改注释颜色
"highlight Comment ctermfg=blue guifg=blue

"=====================tags=================================
"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q -R -f ~/.vim/systags /usr/include /usr/local/include

"ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.vim/systags /usr/include/* /usr/include/sys/* /usr/include/bits/* /usr/include/netinet/* /usr/include/arpa/* /usr/include/mysql/* /usr/include/x86_64-linux-gnu/*

nmap <leader>ct :!ctags -R ../* <CR><CR>
"ctags
set tags+=./tags,../tags,/root/.vim/systags

set path+=/usr/include,/usr/include/x86_64-linux-gnu/,/usr/local/include

"cscope
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1 "default 0
	set cst " ues cstag instead of tag
	"set nocst 
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
	    cs add cscope.out
	" else add database pointed to by environment
	elseif $CSCOPE_DB != ""
	    cs add $CSCOPE_DB
	endif
	set csverb
endif

"cscope设置
set cscopequickfix=s-,c-,d-,i-,t-,e-


"Ignore compiled files
set wildignore=*.o,*~,*.pyc,.git/*,.hg/*,.svn/*

nmap <leader>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <leader>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader>d :scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <leader><leader>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <leader><leader>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <leader><leader>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

"=====================The-NERD-Commenter=================================
"快速批量注释,方便好用 The-NERD-Commenter
"<leader>cc 注释当前选中文本
"<leader>cu 取消选中文本块的注释。

"=====================The-NERD-tree=================================
nmap <leader>nt :NERDTree<cr>:set rnu<cr>
let NERDTreeShowBookmarks=1
let NERDTreeShowFiles=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos=1
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end


"=====================taglist.vim========================================
"<leader>tl 打开taglist窗口
nmap <leader>tl :Tlist<CR><c-l>                
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_File_Fold_Auto_Close = 1             " 自动折叠
let Tlist_Sort_Type = "name"                  "tems in tags sorted by name 
let Tlist_Ctags_Cmd="/usr/bin/ctags"

"=====================Tagbar========================================
"<leader>tb 打开tagbar窗口
nmap <leader>tb :TagbarToggle<CR>  
let g:tagbar_autofocus = 1

"=====================c.vim========================================
"\if      添加函数
"\im    添加主函数
"\cfu   添加 一筐 注释
"\p<   添加 include
"\p"    添加 include
"\nr    插入一段 代码片段， 该代码片段在~/.vim/c-support/codesnippets


"=====================a.vim========================================
"切换源文件头文件 a.vim
":A 在同一tab切换源文件/头文件
":AV 竖向切割窗口,打开对应的源文件/头文件
":AS 横向切割窗口,打开对应的源文件/头文件

"=====================ShowMarks========================================
 let showmarks_enable = 1
 " Show which marks
 let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
 " Ignore help, quickfix, non-modifiable buffers
 let showmarks_ignore_type = "hqm"
 " Hilight lower & upper marks
 let showmarks_hlline_lower = 1
 let showmarks_hlline_upper = 1 

 hi ShowMarksHLl ctermbg=Yellow   ctermfg=Black  guibg=#FFDB72    guifg=Black
 hi ShowMarksHLu ctermbg=Magenta  ctermfg=Black  guibg=#FFB3FF    guifg=Black 

"=====================EasyMotion========================================
"快速移动 EasyMotion
"help easymotion <leader><leader> w


"=====================winmanager========================================
"winmanager
let g:winManagerWindowLayout='FileExplorer,BufExplorer|TagList'
"设置宽度，默认为25
let g:winManagerHigh = 30
"在进入vim时自动打开winmanager
"let g:AutoOpenWinManager = 1
"快捷键打开WinManager
nmap wm :WMToggle<cr>

"=====================general========================================
"打开man手册，分割窗口 <leader>K
runtime! ftplugin/man.vim

"允许未保存切换buffer 隐藏buff
set hidden

"可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
"set mouse=a
"set selection=exclusive
"set selectmode=mouse,key 

"复制之前的缩进
set copyindent

":substitute" flag 'g' is default on
set gdefault

" Set to auto read when a file is changed from the outside
set autoread

"Write the contents of the file, if it has been modified
set autowrite

"显示行号
set number

"历史记录数
set history=1000

"Always show current position
set ruler

"show (partial) command keys in the status line
set showcmd

"Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=b,s,<,>,[,],h,l

"带有如下符号的单词不要换行分割
set iskeyword=@,48-57,_

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=5

"匹配括号的规则，增加针对html的<>
set matchpairs=(:),{:},[:],<:>

" No annoying sound on errors
set noerrorbells
set novisualbell

" Add a bit extra margin to the left
set foldcolumn=1

"在处理未保存或只读文件的时候，弹出确认
set confirm

"设置光标高亮显示
"set cursorline
"set cursorcolumn

"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3 

" Always show the status line
set laststatus=2
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}:%{&fenc!=''?&fenc:&enc}]\ [TYPE=%Y]\ [ROW=%03l/%L(%p%%)]\ [COL=%03v]
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}


"Set utf8 as standard encoding 
"en_US as the standard language

set encoding=utf-8        "vim 内部使用的编码方式
set termencoding=utf-8    "用于屏幕显示
set langmenu=zh_CN.UTF-8
set helplang=cn
set fileformats=unix,dos
set fileencodings=utf-8,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gb2312,cp936

" Use spaces instead of tabs, 1 tab == 4 spaces
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Linebreak on 100 characters
set lbr
set textwidth=100
set formatoptions+=t

"自动换行
set wrap
set cindent
set autoindent
set smartindent 

"字符间插入的像素数目
set linespace=0

"增强模式中的命令行自动完成操作
set wildmenu

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

set foldenable           " enable folden
set foldmethod=manual    " manual : Folds are created manually.
                         " indent : Lines with equal indent form a fold.
                         " expr   : ‘foldexpr’ gives the fold level of a line.
                         " marker : Markers are used to specify folds.
                         " syntax : Syntax highlighting items specify folds.
                         " diff   : Fold text that is not changed.
"set foldclose=all
" use space to folden
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
set viminfo^=%

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
" ptag 
au! CursorHold *.[ch] nested exe "silent! ptag " . expand("<cword>")

