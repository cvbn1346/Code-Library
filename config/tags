!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_SIZE	vp_config.c	62;"	d	file:
CFG_ITEM_MAX	vp_config.c	60;"	d	file:
CFG_NODE	vp_config.c	/^typedef struct CFG_NODE$/;"	s	file:
CFG_NODE	vp_config.c	/^} CFG_NODE;$/;"	t	typeref:struct:CFG_NODE	file:
CRC32	vp_config.c	/^static u32   CRC32[256];$/;"	v	file:
HLIST_HEAD	hlist.h	41;"	d
HLIST_HEAD_INIT	hlist.h	40;"	d
HLIST_H_	hlist.h	9;"	d
INIT_HLIST_HEAD	hlist.h	42;"	d
INIT_HLIST_NODE	hlist.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h) {$/;"	f
MAX_CFG_HASH	vp_config.c	36;"	d	file:
MTP_CFG	vp_config.c	/^struct hlist_head MTP_CFG[MAX_CFG_HASH];$/;"	v	typeref:struct:hlist_head
MTP_CFG_ITEMS	vp_config.c	/^typedef struct MTP_CFG_ITEMS$/;"	s	file:
MTP_CFG_ITEMS	vp_config.c	/^} MTP_CFG_ITEMS;$/;"	t	typeref:struct:MTP_CFG_ITEMS	file:
NAME_LEN	vp_config.c	53;"	d	file:
PATH_LEN	vp_config.c	26;"	d	file:
REGEX_LEN	vp_config.c	25;"	d	file:
TAG_LEN	vp_config.c	24;"	d	file:
__hlist_del	hlist.h	/^static inline void __hlist_del(struct hlist_node *n) {$/;"	f
container_of	hlist.h	18;"	d
crc	vp_config.c	/^	u32 crc;$/;"	m	struct:CFG_NODE	file:
crc32	vp_config.c	/^u32 crc32(u8 *buf, int len)$/;"	f
first	hlist.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
group_read_config_item	vp_config.c	/^int group_read_config_item(config_t * cfg,char * group_name,config_setting_t * channel,MTP_CFG_ITEMS * item)$/;"	f
hlist	vp_config.c	/^	struct hlist_node hlist;$/;"	m	struct:CFG_NODE	typeref:struct:CFG_NODE::hlist_node	file:
hlist_add_after	hlist.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	hlist.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	hlist.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h) {$/;"	f
hlist_del	hlist.h	/^static inline void hlist_del(struct hlist_node *n) {$/;"	f
hlist_del_init	hlist.h	/^static inline void hlist_del_init(struct hlist_node *n) {$/;"	f
hlist_empty	hlist.h	/^static inline int hlist_empty(const struct hlist_head *h) {$/;"	f
hlist_entry	hlist.h	117;"	d
hlist_for_each	hlist.h	119;"	d
hlist_for_each_entry	hlist.h	134;"	d
hlist_for_each_entry_continue	hlist.h	146;"	d
hlist_for_each_entry_from	hlist.h	158;"	d
hlist_for_each_entry_safe	hlist.h	171;"	d
hlist_for_each_safe	hlist.h	123;"	d
hlist_head	hlist.h	/^struct hlist_head {$/;"	s
hlist_move_list	hlist.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	hlist.h	/^struct hlist_node {$/;"	s
hlist_unhashed	hlist.h	/^static inline int hlist_unhashed(const struct hlist_node *h) {$/;"	f
i_value	vp_config.c	/^		int i_value;$/;"	m	union:CFG_NODE::__anon1	file:
init_crc32_table	vp_config.c	/^static void init_crc32_table()$/;"	f	file:
key	vp_config.c	/^	char key[128];$/;"	m	struct:CFG_NODE	file:
key_exists	vp_config.c	/^int key_exists(struct hlist_head *head, CFG_NODE * cfg_node)$/;"	f
key_len	vp_config.c	/^	char key_len;$/;"	m	struct:CFG_NODE	file:
l_int	vp_config.c	/^typedef long int      l_int;$/;"	t	file:
main	vp_config.c	/^int main(int argc, char* argv[])$/;"	f
mtp_cfg_items	vp_config.c	/^MTP_CFG_ITEMS mtp_cfg_items[CFG_ITEM_MAX] =$/;"	v
mtp_cfg_platform	vp_config.c	/^MTP_CFG_ITEMS mtp_cfg_platform[CFG_ITEM_MAX] =$/;"	v
mtp_clear_cfg	vp_config.c	/^int mtp_clear_cfg(config_t * cfg)$/;"	f
mtp_init_cfg	vp_config.c	/^int mtp_init_cfg(config_t * cfg,char * file)$/;"	f
mtp_print_cfg	vp_config.c	/^int mtp_print_cfg( )$/;"	f
name	vp_config.c	/^	char name[NAME_LEN];$/;"	m	struct:MTP_CFG_ITEMS	file:
next	hlist.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
pprev	hlist.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prefetch	hlist.h	23;"	d
read_config_item	vp_config.c	/^int read_config_item(config_t * cfg,MTP_CFG_ITEMS * item)$/;"	f
s_value	vp_config.c	/^		const char * s_value;$/;"	m	union:CFG_NODE::__anon1	file:
type	vp_config.c	/^	int type;$/;"	m	struct:CFG_NODE	file:
type	vp_config.c	/^	int type;$/;"	m	struct:MTP_CFG_ITEMS	file:
u16	vp_config.c	/^typedef uint16_t	u16;$/;"	t	file:
u32	vp_config.c	/^typedef uint32_t	u32;$/;"	t	file:
u64	vp_config.c	/^typedef uint64_t	u64;$/;"	t	file:
u8	vp_config.c	/^typedef uint8_t		u8;$/;"	t	file:
u_char	vp_config.c	/^typedef unsigned char u_char;$/;"	t	file:
ul_int	vp_config.c	/^typedef unsigned long int ul_int;$/;"	t	file:
v	vp_config.c	/^	} v;$/;"	m	struct:CFG_NODE	typeref:union:CFG_NODE::__anon1	file:
